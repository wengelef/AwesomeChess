/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package chess

import org.kodein.di.Kodein
import org.kodein.di.generic.bind
import org.kodein.di.generic.instance
import org.kodein.di.generic.provider
import org.kodein.di.generic.singleton
import java.lang.IllegalArgumentException
import java.util.*

object GameModule {
    fun get() = Kodein.Module("GameModule") {
        bind<ArrayList<Player>>() with provider { arrayListOf(Player(Black), Player(White)) }
        bind<Board>() with provider { Board() }
        bind<Game>() with singleton { Game(instance(), instance()) }
    }
}

val kodein = Kodein {
    import(GameModule.get())
}

val game: Game by kodein.instance()

fun main(args: Array<String>) {

    println(game.state())
}

class Game(
        val players: ArrayList<Player>,
        val board: Board) {

    fun state(): String {
        /*return """
            Players :
            ${players.map { """
                | Team [${it.team}]
                | Pieces [${board.fields[it.team]}""".trimMargin() }}
        """.trimIndent()*/
        return board.fields.toString()
    }
}


data class Player(val team: Team)

class Board(
        /*val pieces: Map<Team, List<Piece>> = mapOf(
                Black to mutableListOf(
                        King,
                        Queen,
                        Rook, Rook,
                        Bishop, Bishop,
                        Knight, Knight,
                        Pawn, Pawn, Pawn, Pawn, Pawn, Pawn, Pawn, Pawn),
                White to mutableListOf(
                        King,
                        Queen,
                        Rook, Rook,
                        Bishop, Bishop,
                        Knight, Knight,
                        Pawn, Pawn, Pawn, Pawn, Pawn, Pawn, Pawn, Pawn)
        ),*/
        val fields: Matrix<Field> = createMutableMatrix(8, 8) { x, y ->
            val team = if (y == 0 || y == 1) White else Black


            val piece = if (y == 0 || y == 7) {
                when (x) {
                    0, 7 -> Optional.of(Rook)
                    1, 6 -> Optional.of(Knight)
                    2, 5 -> Optional.of(Bishop)
                    3, 4 -> {
                        if (y == 0) {
                            Optional.of(King)
                        } else {
                            Optional.of(Queen)
                        }
                    }
                    else -> throw IllegalArgumentException("Field out of Bounds at $x, $y")
                }
            } else if (y == 1 || y == 6) {
                Optional.of(Pawn)
            } else {
                Optional.empty()
            }

            Field(team, piece)
        }
)

data class Field(val owner: Team, val piece: Optional<out Piece>)
